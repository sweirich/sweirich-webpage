
@phdthesis{
author={Choudhury,Pritam},
year={2023},
title={Dependency and Linearity Analyses in Pure Type Systems},
pages={439},
abstract={Dependency analysis is necessary to ensure proper flow of information in programming languages. Linearity analysis is necessary to ensure proper usage of resources in programming languages. These analyses are used for many purposes: for example, analyzing binding-time for partial evaluation of programs, ensuring data security in programs, ensuring deadlock freedom in concurrent programs, etc. What connects these analyses is that both of them need to model at least two different worlds with constrained mutual interaction. To elaborate, a typical dependency analysis may model low-security and high-security worlds with the constraint that information never leaks from the high-security world to the low-security world; a typical linearity analysis may model nonlinear and linear worlds with the constraint that derivations in the nonlinear world cannot make use of assumptions from the linear world. To statically enforce such constraints, dependency and linear type systems are employed. Several dependency and linear type systems have been proposed in literature, especially with respect to simple and polymorphic types. However, with respect to dependent types, the two analyses have not been explored much.This dissertation explores how dependent types interact with dependency and linearity analyses. More precisely, in this dissertation, we extend dependency and linearity analyses to Pure Type Systems, which include several well-known dependent type systems. We build upon existing work on graded type systems to develop three specific graded calculi for Pure Type Systems: DDC for dependency analysis, GraD for linearity analysis and LDC for combined dependency and linearity analysis. Our thesis is that these calculi provide a systematic way for analyzing dependency, linearity or a combination of the two in any Pure Type System. We study the metatheoretic properties of these calculi, show soundness of their analyses, discuss their applications and position them in the milieu of other dependency and linear calculi. Overall, our work provides insight into several nuances, hitherto unknown, of dependency and linearity analyses and their interactions with dependent types.},
keywords={Dependent types; Graded type systems; Dependency analysis; Programming languages; Pure Type Systems; Data security; Computer science; Computer engineering; Information technology; 0489:Information Technology; 0984:Computer science; 0464:Computer Engineering},
isbn={9798380385343},
language={English},
url={https://repository.upenn.edu/handle/20.500.14332/59273},
school={University of Pennsylvania}
}


@article{choudhury:monadic-comonadic,
  author =       {Choudhury, Pritam},
  title =        {Monadic and Comonadic Aspects of Dependency Analysis},
  year =         2022,
  issue_date =   {October 2022},
  publisher =    {Association for Computing Machinery},
  address =      {New York, NY, USA},
  volume =       6,
  number =       {OOPSLA2},
  url =          {https://doi.org/10.1145/3563335},
  doi =          {10.1145/3563335},
  abstract =     {Dependency analysis is vital to several applications in
                  computer science. It lies at the essence of secure
                  information flow analysis, binding-time analysis,
                  etc. Various calculi have been proposed in the literature
                  for analysing individual dependencies. Abadi et. al., by
                  extending Moggi’s monadic metalanguage, unified several of
                  these calculi into the Dependency Core Calculus (DCC). DCC
                  has served as a foundational framework for dependency
                  analysis for the last two decades. However, in spite of its
                  success, DCC has its limitations. First, the monadic bind
                  rule of the calculus is nonstandard and relies upon an
                  auxiliary protection judgement. Second, being of a monadic
                  nature, the calculus cannot capture dependency analyses that
                  possess a comonadic nature, for example, the binding-time
                  calculus, λ∘, of Davies. In this paper, we address these
                  limitations by designing an alternative dependency calculus
                  that is inspired by standard ideas from category theory. Our
                  calculus is both monadic and comonadic in nature and
                  subsumes both DCC and λ∘. Our construction explains the
                  nonstandard bind rule and the protection judgement of DCC in
                  terms of standard categorical concepts. It also leads to a
                  novel technique for proving correctness of dependency
                  analysis. We use this technique to present alternative
                  proofs of correctness for DCC and λ∘.},
  journal =      {Proc. ACM Program. Lang.},
  month =        {oct},
  articleno =    172,
  numpages =     29,
  keywords =     {Presence-Absence Test, Eilenberg-Moore Algebra, Graded Type
                  System}
}


@inproceedings{Breitner:2018:inspection,
 author = {Breitner, Joachim},
 title = {A Promise Checked is a Promise Kept: Inspection Testing},
 booktitle = {Proceedings of the 11th ACM SIGPLAN International Symposium on Haskell},
 series = {Haskell 2018},
 year = {2018},
 isbn = {978-1-4503-5835-4},
 location = {St. Louis, MO, USA},
 pages = {14--25},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/3242744.3242748},
 doi = {10.1145/3242744.3242748},
 acmid = {3242748},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Compilers, Haskell, Testing},
} 


@article{Foner:2018:laziness,
 author = {Foner, Kenneth and Zhang, Hengchu and Lampropoulos, Leonidas},
 title = {Keep Your Laziness in Check},
 journal = {Proc. ACM Program. Lang.},
 issue_date = {September 2018},
 volume = {2},
 number = {ICFP},
 month = jul,
 year = {2018},
 issn = {2475-1421},
 pages = {102:1--102:30},
 articleno = {102},
 numpages = {30},
 url = {http://doi.acm.org/10.1145/3236797},
 doi = {10.1145/3236797},
 acmid = {3236797},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Generic Programming, Haskell, Laziness, Random Testing},
} 

@article{Yorgey:2018:bijections,
 author = {Yorgey, Brent A. and Foner, Kenneth},
 title = {What's the Difference? A Functional Pearl on Subtracting Bijections},
 journal = {Proc. ACM Program. Lang.},
 issue_date = {September 2018},
 volume = {2},
 number = {ICFP},
 month = jul,
 year = {2018},
 issn = {2475-1421},
 pages = {101:1--101:21},
 articleno = {101},
 numpages = {21},
 url = {http://doi.acm.org/10.1145/3236796},
 doi = {10.1145/3236796},
 acmid = {3236796},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {bijection, difference},
} 

@inproceedings{Lampropoulos:2017:ORU:3122955.3122959,
 author = {Lampropoulos, Leonidas and Spector-Zabusky, Antal and Foner, Kenneth},
 title = {Ode on a Random Urn (Functional Pearl)},
 booktitle = {Proceedings of the 10th ACM SIGPLAN International Symposium on Haskell},
 series = {Haskell 2017},
 year = {2017},
 isbn = {978-1-4503-5182-9},
 location = {Oxford, UK},
 pages = {26--37},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/3122955.3122959},
 doi = {10.1145/3122955.3122959},
 acmid = {3122959},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Data Structure, QuickCheck, Random Testing, Sampling, Urn},
} 

@inproceedings{Paykin:2016:CYO:2976022.2976024,
 author = {Paykin, Jennifer and Spector-Zabusky, Antal and Foner, Kenneth},
 title = {Choose Your Own Derivative (Extended Abstract)},
 booktitle = {Proceedings of the 1st International Workshop on Type-Driven Development},
 series = {TyDe 2016},
 year = {2016},
 isbn = {978-1-4503-4435-7},
 location = {Nara, Japan},
 pages = {58--59},
 numpages = {2},
 url = {http://doi.acm.org/10.1145/2976022.2976024},
 doi = {10.1145/2976022.2976024},
 acmid = {2976024},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Haskell, concurrency, derivatives, selective choice},
} 

@InProceedings{eisenberg15,
  author =   {Jan Stolarek and Simon {Petyon Jones} and Richard A. Eisenberg},
  title =    {Injective Type Families for Haskell},
  booktitle = {Haskell Symposium},
  year =      2015,
  address =   {Vancouver, BC, Canada}}

@InProceedings{eisenberg:pattern-syns,
  author =    {Matthew Pickering and Gergő Érdi and Simon Peyton Jones and Richard A. Eisenberg},
  title =     {Pattern Synonyms},
  year =      2016,
  booktitle = {Haskell Symposium},
  address =   {Nara, Japan}}

@inproceedings{Muranushi:2014:ERT:2633357.2633362,
 author = {Muranushi, Takayuki and Eisenberg, Richard A.},
 title = {Experience Report: Type-checking Polymorphic Units for Astrophysics Research in Haskell},
 booktitle = {Proceedings of the 2014 ACM SIGPLAN Symposium on Haskell},
 series = {Haskell '14},
 year = {2014},
 isbn = {978-1-4503-3041-1},
 location = {Gothenburg, Sweden},
 pages = {31--38},
 numpages = {8},
 url = {http://doi.acm.org/10.1145/2633357.2633362},
 doi = {10.1145/2633357.2633362},
 acmid = {2633362},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Haskell, quantity calculus, type families, type-level computation},
} 


@inproceedings{Eisenberg:2014:PFT:2633357.2633361,
 author = {Eisenberg, Richard A. and Stolarek, Jan},
 title = {Promoting Functions to Type Families in Haskell},
 booktitle = {Proceedings of the 2014 ACM SIGPLAN Symposium on Haskell},
 series = {Haskell '14},
 year = {2014},
 isbn = {978-1-4503-3041-1},
 location = {Gothenburg, Sweden},
 pages = {95--106},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2633357.2633361},
 doi = {10.1145/2633357.2633361},
 acmid = {2633361},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Haskell, defunctionalization, type-level programming},
} 


@inproceedings{yorgey-2010-species,
 author = {Yorgey, Brent A.},
 title = {Species and functors and types, oh my!},
 booktitle = {Proceedings of the third ACM Haskell symposium on Haskell},
 series = {Haskell '10},
 year = {2010},
 isbn = {978-1-4503-0252-4},
 location = {Baltimore, Maryland, USA},
 pages = {147--158},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/1863523.1863542},
 doi = {http://doi.acm.org/10.1145/1863523.1863542},
 acmid = {1863542},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {algebraic data types, combinatorial species},
}

@inproceedings{Yorgey:2012:MTV:2364506.2364520,
 author = {Yorgey, Brent A.},
 title = {Monoids: Theme and Variations (Functional Pearl)},
 booktitle = {Proceedings of the 2012 Haskell Symposium},
 series = {Haskell '12},
 year = {2012},
 isbn = {978-1-4503-1574-6},
 location = {Copenhagen, Denmark},
 pages = {105--116},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2364506.2364520},
 doi = {10.1145/2364506.2364520},
 acmid = {2364520},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {edsl, homomorphism, monoid, monoid action},
} 

#########################################



@PhdThesis{choudhury:phd,
  author =       {Pritam Choudhury},
  title =        {Dependency and Linearity Analyses in Pure Type Systems},
  school =       {University of Pennsylvania},
  year =         2023}

@PhdThesis{li:phd,
  author = {Yao Li},
  title = {Mechanized Reasoning About "how" Using Functional Programs And Embeddings},
  school = {University of Pennsylvania},
  year = 2022,
  series = {Publicly Accessible Penn Dissertations},
  number = 5111,
  url = {\url{https://repository.upenn.edu/edissertations/5111}}
}

@PhDThesis{spector-zabusky:phd,
  author = {Antal Spector-Zabusky}
  title = {Don’t Mind The Formalization Gap: The Design And Usage Of Hs-To-Coq}
  year = 2021,
  series = {Publicly Accessible Penn Dissertations},
  number ={4250},
  url = {\url{https://repository.upenn.edu/edissertations/4250}}
}

@PhdThesis{eisenberg:thesis,
  author = 		  {Richard Alan Eisenberg},
  title = 		  {Dependent Types in Haskell: Theory and Practice},
  school = 		  {University of Pennsylvania},
  year = 		  2016,
  series = {Publicly Accessible Penn Dissertations},
  number =2266,
  url = {\url{https://repository.upenn.edu/edissertations/2266}}
}

@PhdThesis{sjoeberg:phd,
  author = 		  {Vilhelm Sj\"{o}berg},
  title = 		  {A Dependently Typed Language with Nontermination},
  school = 		  {University of Pennsylvania},
  year = 		  2015}

@PhdThesis{yorgey:phd,
  author = {Brent A. Yorgey}, 
  title = {Combinatorial Species and Labelled Structures},
  school = {University of Pennsylvania}, 
  year = {2014},
  month = {dec}
}

@PhdThesis{casinghino:phd,
  author = 		  {Chris Casinghino},
  title = 		  {Combining Proofs and Programs},
  school = 		  {University of Pennsylvania},
  year = 		  2014,
  month = 	  {dec}
}

@PhdThesis{vytiniotis:phd,
  author = 		  {Dimitrios Vytiniotis},
  title = 		  {Practical type inference for first-class polymorphism},
  school = 		  {University of Pennsylvania},
  year = 		  2008,
  month = 	  aug}

@PhdThesis{washburn:phd,
  author = {Geoffrey Alan Washburn}, 
  title  = "Principia Narcissus: How to avoid being caught by your reflection",
  school = "University of Pennsylvania", 
  year =  2007, 
  month = dec,
  url = {http://repository.upenn.edu/dissertations/AAI3292086},
}


