@comment{{This file has been generated by bib2bib 1.96}}

@comment{{Command line: bib2bib -c '$type = "INCOLLECTION"' ../bibdefs.bib ../weirich.bib}}

@string{lncs = {Lecture Notes in Computer Science}}

@string{dl = {http://www.seas.upenn.edu/~sweirich/papers/}}

@incollection{weirich:handbook,
  author = {Stephanie Weirich},
  editor = {Teofilo Gonzalez},
  booktitle = {Computing Handbook Set---Computer Science (I)},
  title = {Type Systems},
  publisher = {CRC Press},
  year = 2013,
  edition = {Third},
  note = {Forthcoming}
}

@incollection{weirich:aritygen-journal,
  author = {Stephanie Weirich and Chris Casinghino},
  editor = {Jeremy Gibbons},
  booktitle = {Generic and Indexed Programming},
  title = {Generic Programming with Dependent Types},
  publisher = {Springer-Verlag Berlin Heidelberg},
  year = 2012,
  pdf = {http://www.cis.upenn.edu/~sweirich/papers/ssgip-journal.pdf},
  number = 7470,
  series = lncs,
  plclub = {yes},
  pages = {217--258}
}

@incollection{hicks00,
  plclub = {yes},
  author = {Michael Hicks and Stephanie Weirich and Karl Crary},
  title = {Safe and Flexible Dynamic Linking of Native Code},
  booktitle = {Types in Compilation: Third International Workshop, TIC 2000;
               Montreal, Canada, September 21, 2000; Revised Selected Papers},
  editor = {R. Harper},
  publisher = {Springer},
  year = 2001,
  series = lncs,
  volume = 2071,
  pages = {147--176},
  annote = {Related technical report: Michael Hicks and Stephanie
     Weirich.  A calculus for dynamic loading. 
    University of Pennsylvania Computer and Information Science
     Technical Report,
     MS-CIS-00-07,  April 2000.},
  abstract = {We present the design and implementation of the first
     complete framework for flexible and safe dynamic linking of
     native code. Our approach extends Typed Assembly Language with a
     primitive for loading and typechecking code, which is flexible
     enough to support a variety of linking strategies, but simple
     enough that it does not significantly expand the trusted
     computing base. Using this primitive, along with the ability to
     compute with types, we show that we can program many existing
     dynamic linking approaches. As a concrete demonstration, we have
     used our framework to implement dynamic linking for a type-safe
     dialect of C, closely modeled after the standard linking facility
     for Unix C programs. Aside from the unavoidable cost of
     verification, our implementation performs comparably with the
     standard, untyped approach.},
  url = {http://link.springer.de/link/service/series/0558/tocs/t2071.htm},
  ps = dl # {taldynlink/taldynlink.ps.gz},
  pdf = dl # {taldynlink/taldynlink.pdf}
}

