<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;
      charset=windows-1252">
    <meta http-equiv="Content-Language" content="en-us">
    <title>Stephanie Weirich</title>
    <link rel="stylesheet" type="text/css" href="style.css">
    <base href="http://www.seas.upenn.edu/%7Esweirich/">
    <script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-20228260-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

  </script>
  </head>
  <body style="background-color: rgb(245, 245, 231);">
    <table style="width: 100%; height: 1px;" border="0" cellpadding="7"
      cellspacing="0">
      <tbody>
        <tr>
          <td style="vertical-align: top; width: 93%;">
            <table style="text-align: left; margin-left: auto;
              margin-right: auto; width: 829px; height: 1570px;"
              border="0">
              <tbody>
                <tr>
                  <td height="331" width="325">
                    <h2><font color="#004080" face="Arial, Helvetica,
                        sans-serif">Stephanie Weirich</font></h2>
                    <p><font face="Arial, Helvetica, sans-serif"><br>
                        <strong>Associate Professor of <a
                            href="http://www.cis.upenn.edu">Computer and
                            Information Science</a></strong><br>
                        <a href="http://www.seas.upenn.edu"> School of
                          Engineering
                          and Applied Science</a><br>
                        <a href="http://www.upenn.edu"> University of
                          Pennsylvania</a> </font></p>
                    <p><font face="Arial, Helvetica, sans-serif">Ph.D.
                        (2002)<a href="http://www.cs.cornell.edu">
                          Computer Science</a><br>
                        <a href="http://www.cornell.edu">Cornell
                          University</a><br>
                        <b><br>
                          phone:</b>
                        215.573.2821<br>
                        <b> fax:</b> 215.898.0587 <br>
                        <b> email:</b> sweirich at cis.upenn.edu<br>
                        <strong>office:</strong> 510 Levine Hall</font></p>
                    <p><span style="font-weight: bold;">Spring 2014 </span><font
                        face="Arial, Helvetica, sans-serif"><strong>office
                          hours</strong>: Mondays, 1:00-3:00PM or by
                        appointment</font><br>
                    </p>
                  </td>
                  <td width="252"> <img src="images/steph-2012.jpg"
                      align="right" width="252"></td>
                </tr>
                <tr>
                  <td colspan="2">
                    <hr>
                    <h3>Quick Links</h3>
                    <ul>
                      <li><a href="publications.html">My publications</a>
                        (including drafts) </li>
                      <li> <a href="research.htm">More information
                          about my
                          research </a> (CV, talks, activities, etc.) </li>
                      <li><a href="http://www.cis.upenn.edu/%7Eplclub/">Penn's
Programming
                          Languages group (plclub)<br>
                        </a></li>
                    </ul>
                    <h3>Research Projects <br>
                    </h3>
                    <ul>
                      <li><span style="font-weight: bold;">TRELLYS</span><span
                          style="font-weight: normal;">: The TRELLYS
                          project seeks to design a
                          dependently-typed programming language that
                          supports both programming
                          and theorem proving in the same framework.
                          With <a
                            href="http://homepage.cs.uiowa.edu/%7Eastump/">Aaron
                            Stump</a> (Iowa
                          State) and <a
                            href="http://web.cecs.pdx.edu/%7Esheard/">Tim
                            Sheard</a>
                          (Portland State), we have been discovering
                          what
                          it means for programs and proofs to interact.
                          See our recent <a href="papers/modal.pdf">paper
                            submission</a>, as well as papers in <a
                            href="http://www.seas.upenn.edu/%7Esweirich/papers/msfp12log.pdf">MSFP</a>
                          <a
                            href="http://www.seas.upenn.edu/%7Esweirich/papers/msfp12prog.pdf">2012</a>
                          and <a
href="http://www.seas.upenn.edu/%7Esweirich/papers/plpv2012genreccbv.pdf">PLPV
                            2012</a>. Also, </span>slides from <a
                          href="talks/TrellysPLPV.pdf">PLPV
                          2010</a> and <a href="talks/tlca-2011.pdf">RDP
                          2011</a>, give an
                        overview of our work. <br>
                        <br>
                      </li>
                      <li style="font-weight: bold;">Dependently-Typed
                        Haskell: <span style="font-weight: normal;">Working
                          with <a
                            href="http://research.microsoft.com/en-us/people/simonpj/">Simon
Peyton
                            Jones</a> and <a
                            href="http://research.microsoft.com/en-us/people/dimitris/">Dimitrios
                            Vytiniotis</a> at MSR Cambridge, Penn
                          students Brent Yorgey, Richard
                          Eisenberg and Justin Hsu and I have been
                          working to extend the type
                          system of Haskell with better support for
                          dependently-typed programing. </span><br
                          style="font-weight: normal;">
                      </li>
                      <ul>
                        <li><a href="papers/nokinds-extended.pdf">Down
                            with
                            kinds: adding dependent heterogenous
                            equality to FC</a> (in submission)
                          extends GHC's core language with support for
                          kind equalities.<br>
                        </li>
                        <li style="font-weight: bold;"><span
                            style="font-weight: normal;"><a
                              href="http://www.cis.upenn.edu/%7Eeir/papers/2012/singletons/paper.pdf">Dependently-typed
programming
with
                              singletons</a> (Haskell Symposium 2012)
                            discusses the <a
                              href="http://hackage.haskell.org/package/singletons">singletons</a>
                            library that automatically generates
                            infrastructure for
                            dependently-typed programming.</span><br>
                        </li>
                        <li><a href="papers/tldi2012.pdf">Giving Haskell
                            a
                            Promotion</a> (TLDI 2012, with <a
                            href="http://dreixel.net/">José
                            Pedro Magãlhaes</a> and <a
                            href="http://gallium.inria.fr/%7Ejcretin/">Julien
                            Cretin</a>) adds kind polymorphism and
                          datatype promotion to GHC.</li>
                      </ul>
                    </ul>
                    <ul>
                      <li><span style="font-weight: bold;">Type-directed
                          programming</span>: <span style="font-style:
                          italic;"></span>Defining
                        functions via type information cuts down
                        on boilerplate programming as many operations
                        may be defined once, for
                        all types of data. With my student <a
                          href="http://www.cis.upenn.edu/%7Ebyorgey/">Brent
                          Yorgey</a> and
                        collaborator <a
                          href="http://web.cecs.pdx.edu/%7Esheard/">Tim
                          Sheard</a>
                        (Portland State), I developed <a
                          href="http://hackage.haskell.org/package/unbound/">Unbound</a>,
                        a <a href="http://www.haskell.org/ghc/">Haskell</a>
                        library for
                        declaratively specifying binding structure and
                        automatically generating
                        free variable, alpha-equivalence and
                        substitution functions. This
                        library is built using <a
                          href="http://hackage.haskell.org/package/RepLib/">RepLib</a>,
                        an
                        expressive library that I developed for generic
                        programming in Haskell.
                        My student <a
                          href="http://www.seas.upenn.edu/%7Eccasin/">Chris
Casinghino
                        </a>and I explored <a
                          href="http://www.seas.upenn.edu/%7Esweirich/papers/aritygen.pdf">arity
and
                          type generic programming in Agda</a>, <a
                          href="http://www.seas.upenn.edu/%7Esweirich/ssgip/">lecture
                          notes</a>
                        from the<a
                          href="http://www.comlab.ox.ac.uk/projects/gip/school.html">
                          Spring
                          School on Generic and Indexed Programming</a>
                        provide a gentle
                        introduction.<br>
                        <br>
                      </li>
                      <li><span style="font-weight: bold;">Machine
                          assistance
                          for programming languages research</span>:&nbsp;
                        Designing and proving
                        properties about programming languages is hard,
                        but the proofs
                        themselves are straightforward once you know how
                        to set them up. At the
                        same time, it is all too easy to miss the one
                        little case that ruins
                        the
                        whole "proof". Modern proof assistants, such as
                        <a href="http://www.cs.cmu.edu/%7Etwelf/">Twelf</a>,
                        <a href="http://coq.inria.fr/">Coq</a>, and <a
href="http://www.cl.cam.ac.uk/Research/HVG/Isabelle/">Isabelle</a>
                        are good at expressing this sort of reasoning,
                        but it is hard to
                        know where to start. I've been working with the
                        <a
                          href="http://www.cis.upenn.edu/proj/plclub/mmm/">POPLmark
                          team</a> to
                        issue <a
                          href="http://www.cis.upenn.edu/proj/plclub/mmm/">challenge
                          problems</a>, organize a <a
                          href="http://www.seas.upenn.edu/%7Esweirich/wmm/">workshop</a>,
                        explore <a
                          href="http://www.seas.upenn.edu/%7Esweirich/papers/nominal-coq/">techniques
                          for
                          reasoning
                          about
                          binding</a>, and develop <a
                          href="http://www.seas.upenn.edu/%7Esweirich/cis700/f06/">educational
                          materials</a> about mechanizing programming
                        language metatheory. Brian
                        Aydemir developed a <a
                          href="http://www.cis.upenn.edu/%7Eplclub/metalib/">library</a>
                        for
                        programming language metatheory (used in the
                        Penn tutorials) and <a
                          href="http://www.cis.upenn.edu/%7Ebaydemir/papers/lngen/">LNgen</a>,
                        a
                        tool for automatically proving properties about
                        binding.<br>
                      </li>
                    </ul>
                    <span style="font-weight: bold;"></span>
                    <ul>
                      <li><span style="font-weight: bold;">Type
                          inference for
                          advanced type systems</span>: Advanced type
                        system features, such <span style="font-style:
                          italic;">as <a href="papers/putting.pdf">first-class
                            polymorphism</a></span>,<span
                          style="font-style: italic;"> <a
                            href="http://www.seas.upenn.edu/%7Esweirich/papers/icfp08.pdf">impredicative
                            polymorphism</a></span> and <a
                          href="http://www.seas.upenn.edu/%7Esweirich/papers/gadt.pdf"><span
                            style="font-style: italic;">generalized
                            algebraic datatypes</span></a>,
                        do
                        not
                        interact
                        well
                        with
                        the
                        standard
                        algorithms
                        for type inference in
                        modern typed functional languages, such as ML
                        and Haskell.&nbsp; <a
                          href="http://research.microsoft.com/%7Esimonpj/">Simon
                          Peyton Jones</a>,
                        my
                        students
                        Dimitrios
                        Vytiniotis,
                        Geoffrey
                        Washburn and I have incorporated ideas from
                        Local Type
                        Inference to extend the <a
                          href="http://www.haskell.org/ghc/">Glasgow
                          Haskell Compiler</a> with support for these
                        features. <br>
                      </li>
                    </ul>
                    <h3><font face="Arial, Helvetica, sans-serif">Current
                        Students</font></h3>
                    <ul>
                      <li><a href="http://www.seas.upenn.edu/%7Eccasin/">Chris
Casinghino
                          <br>
                        </a></li>
                      <li><a
                          href="http://www.seas.upenn.edu/%7Evilhelm/">Vilhelm
                          Sjöberg</a></li>
                      <li><a href="http://www.cis.upenn.edu/%7Ebyorgey/">Brent
                          Yorgey</a></li>
                      <li><a href="http://www.cis.upenn.edu/%7Eeir/">Richard
A.
                          Eisenberg</a></li>
                    </ul>
                    <h3>PhD Graduates<br>
                    </h3>
                    <ul>
                      <li><font face="Arial, Helvetica, sans-serif">Geoffrey
Washburn,
                          Dec.
                          2007</font></li>
                      <ul>
                        <li><a
                            href="http://repository.upenn.edu/dissertations/AAI3292086/">Principia
Narcissus:
                            How to avoid being caught by your reflection</a></li>
                        <li><font face="Arial, Helvetica, sans-serif">Current
employment:
                            <a href="http://www.logicblox.com/">LogicBlox</a></font></li>
                      </ul>
                      <li>Dimitrios
                        Vytiniotis, Aug. 2008</li>
                      <ul>
                        <li><a
                            href="http://repository.upenn.edu/dissertations/AAI3328671/">Practical
type
                            inference for first-class polymorphism</a></li>
                        <li>Current employment: <a
                            href="http://research.microsoft.com/en-us/people/dimitris/">MSR
                            Cambridge</a><br>
                        </li>
                      </ul>
                    </ul>
                    <h3><font face="Arial, Helvetica, sans-serif">Recent
                        Courses</font></h3>
                    <blockquote> </blockquote>
                    <ul>
                      <li>Fall 13 - <a
                          href="http://www.seas.upenn.edu/%7Ecis552/13fa/">Advanced
                          Programming (CIS 552)</a><br>
                      </li>
                      <li>Spring 13 - <a
                          href="http://www.seas.upenn.edu/%7Ecis120/13sp/">Programming
                          Languages
                          and Techniques I (CIS 120)</a><br>
                      </li>
                      <li>Fall 12 - <a
                          href="http://www.seas.upenn.edu/%7Ecis552/12fa/">Advanced
                          Programming
                          (CIS 552)</a></li>
                      <li>Spring 12 - <a
                          href="http://www.seas.upenn.edu/%7Ecis120">Programming
                          Languages and
                          Techniques I (CIS 120)</a></li>
                      <li>Fall 11 - <a
                          href="http://www.seas.upenn.edu/%7Ecis552/11fa/">Advanced
                          Programming
                          (CIS
                          552)</a></li>
                      <li>Spring 11 - Programming Languages and
                        Techniques I
                        (CIS 120)</li>
                      <li>Fall 10 - <a href="cis670/10/">Advanced
                          Topics in
                          Programming Languages (CIS 670)</a> </li>
                    </ul>
                    <blockquote>
                      <p><font face="Arial, Helvetica, sans-serif"><a
                            href="http://www.seas.upenn.edu/%7Ecis670">
                          </a> <b><a href="teaching.html">Other courses</a></b>
                        </font></p>
                    </blockquote>
                    <h3><font face="Arial, Helvetica, sans-serif">Contact
                        Information</font></h3>
                    <blockquote>
                      <p><font face="Arial, Helvetica, sans-serif"> <strong>postal
                            mail:<br>
                          </strong>School of Engineering and Applied
                          Science<br>
                          Department of Computer and Information Science<br>
                          Levine Hall<br>
                          3330 Walnut Street<br>
                          Philadelphia, PA 19104-6389 <br>
                        </font></p>
                    </blockquote>
                    <h3><font face="Arial, Helvetica, sans-serif">Advice
                        for
                        graduate students</font></h3>
                    <blockquote>
                      <p> <a href="graduate.html">Interested in
                          Graduate
                          Studies at Penn?</a></p>
                      <p><a href="http://www.seas.upenn.edu/%7Ecisters/">CISters</a>
                      </p>
                      <p><font face="Arial, Helvetica, sans-serif">Advice
                          for <a href="phdadvice.htm">PhD students</a>
                          in CS<br>
                          <a href="http://atwhatcost.org"><br>
                          </a> </font></p>
                    </blockquote>
                  </td>
                </tr>
                <tr>
                  <td colspan="2">&nbsp;</td>
                </tr>
              </tbody>
            </table>
            <p>&nbsp;</p>
          </td>
        </tr>
        <tr>
          <td height="1">&nbsp; </td>
        </tr>
      </tbody>
    </table>
    <br>
    <br>
    <br>
    <br>
    <br>
  </body>
</html>
